generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/.prisma/client"
  binaryTargets = ["native", "debian-openssl-1.1.x", "linux-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ButtonType {
  below
  inside
}

enum StatusSignature {
  APPROVED
  PENDING
  CANCELED
  ACTIVE
  PAST_DUE
  UNPAID
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
  PAUSED
}

enum Role {
  ADMIN
  MEMBER
}

enum ChargeFrequency {
  ANNUALLY
  MONTHLY
}

model Lead {
  id       String @id @default(uuid())
  name     String
  phone    String
  email    String
  document String
  plan     String

  @@map("leads")
}

model User {
  id            String      @id @default(uuid())
  name          String
  phone         String
  email         String      @unique
  password_hash String
  document      String?
  role          Role        @default(MEMBER)
  accountType   String?
  memberArea    String?
  videoHosting  String?
  created_at    DateTime    @default(now())
  videos        Video[]
  folders       Folder[]
  Signature     Signature[]

  @@map("users")
}

model Signature {
  id                  String          @id @default(uuid())
  status              StatusSignature
  plan                String
  ChargeFrequency     ChargeFrequency
  price               String
  payment_method      String
  userId              String
  kirvano_type        String?
  kirvano_sale_id     String?
  kirvano_checkout_id String?
  next_charge_date    String?
  created_at          DateTime        @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("signatures")
}

model Folder {
  id         String   @id @default(uuid())
  name       String
  coverUrl   String?
  favorite   Boolean  @default(false)
  userId     String
  created_at DateTime @default(now())
  videos     Video[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("folders")
}

model Video {
  id                       String          @id @default(uuid())
  videoPlayerid            String          @default(uuid())
  name                     String
  url                      String
  thumbnail                String?
  format                   String
  tags                     String
  userId                   String
  duration                 String
  type                     String
  fictitiousProgress       Boolean?
  color                    String?
  colorSmartPlayers        String?
  playAndPause             Boolean?
  progressBar              Boolean?
  timeTraveled             Boolean?
  videoDuration            Boolean?
  volumeButton             Boolean?
  volumeBar                Boolean?
  speed                    Boolean?
  fullscreen               Boolean?
  smartAutoPlay            Boolean?
  UrlCoverSmartAutoPlay    String?
  TextTopSmartAutoPlay     String?
  TextButtonSmartAutoPlay  String?
  continueWatching         Boolean?
  watchingNow              Boolean?
  watchingNowFontSize      String?
  watchingNowBgColor       String?
  watchingNowTextColor     String?
  ImageVideoPause          Boolean?
  UrlCoverImageVideoPause  String?
  ImageOfFinished          Boolean?
  chapterMenu              Boolean?
  buttonsActive            Boolean?
  UrlCoverImageOfFinished  String?
  fictitiousProgressHeight String?
  folderId                 String?
  tagId                    String?
  created_at               DateTime        @default(now())
  analytics                VideoAnalytics?

  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  folder       Folder?        @relation(fields: [folderId], references: [id], onDelete: Cascade)
  tag          Tag?           @relation(fields: [tagId], references: [id], onDelete: Cascade)
  Chapter      Chapter[]
  VideoButtons VideoButtons[]

  @@map("videos")
}

model Chapter {
  id         String   @id @default(uuid())
  title      String
  startTime  String
  endTime    String
  videoId    String
  created_at DateTime @default(now())

  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@map("chapters")
}

model Tag {
  id         String   @id @default(uuid())
  name       String   @unique
  created_at DateTime @default(now())
  Video      Video[]

  @@map("tags")
}

model VideoAnalytics {
  id             String          @id @default(uuid())
  totalPlays     Int             @default(0)
  totalViews     Int             @default(0)
  videoId        String          @unique
  created_at     DateTime        @default(now())
  viewTimestamps ViewTimestamp[]
  viewUnique     ViewUnique[]

  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@map("video_analytics")
}

model ViewTimestamp {
  id               String   @id @default(uuid())
  startTimestamp   Float
  endTimestamp     Float
  videoAnalyticsId String
  userIp           String
  deviceType       String
  agent            String
  country          String
  region           String
  city             String
  created_at       DateTime @default(now())

  videoAnalytics VideoAnalytics @relation(fields: [videoAnalyticsId], references: [id], onDelete: Cascade)

  @@map("view_timestamps")
}

model ViewUnique {
  id               String   @id @default(uuid())
  videoAnalyticsId String
  userIp           String
  deviceType       String
  agent            String
  country          String
  region           String
  city             String
  created_at       DateTime @default(now())

  videoAnalytics VideoAnalytics @relation(fields: [videoAnalyticsId], references: [id], onDelete: Cascade)

  @@map("view_unique")
}

model Token {
  id            String   @id @default(uuid())
  videoPlayerId String
  token         String   @unique
  isValid       Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("tokens")
}

model VideoButtons {
  id                      Int        @id @default(autoincrement())
  buttonType              ButtonType
  buttonText              String
  buttonSize              String
  buttonLink              String
  startTime               String
  endTime                 String
  buttonAfterTheVideoEnds Boolean?
  backgroundColor         String
  textColor               String
  hoverBackgroundColor    String
  hoverTextColor          String
  buttonPosition          String?
  videoId                 String
  Video                   Video      @relation(fields: [videoId], references: [id], onDelete: Cascade)
}
